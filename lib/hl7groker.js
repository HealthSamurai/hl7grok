// Generated by CoffeeScript 1.10.0
(function() {
  var coerce, fs, getMeta, msg, parse, parseComponents, parseFields, parseSegments, parseSubComponents, replaceBlanksWithNulls;

  fs = require("fs");

  msg = "MSH|^~\\&|AccMgr|1|||20151015200643||ADT^A01|599102|P|2.3|foo||\nEVN|foo|20151010045502|||||\nPID|1|010107111^^^MS4^PN^|160922^^^MS4^MR^001|160922^^^MS4^MR^001|BARRETT^JEAN^SANDY^^||19440823|F||C|STRAWBERRY AVE^FOUR OAKS LODGE^ALBUKERKA^CA^98765^USA^^||(111)222-3333||ENG|W|CHR|11115555555^^^MS4001^AN^001|123-22-1111||||OKLAHOMA|||||||N\nPV1|1|I|PREOP^101^1^1^^^S|3|||37^REID^TIMOTHY^Q^^^^^^AccMgr^^^^CI|||01||||1|||37^REID^TIMOTHY^Q^^^^^^AccMgr^^^^CI|2|40007716^^^AccMgr^VN|4|||||||||||||||||||1||G|||20050110045253||||||\nGT1|1|010107127^^^MS4^PN^|BARRETT^JEAN^S^^|BARRETT^LAWRENCE^E^^|2820 SYCAMORE AVE^TWELVE OAKS LODGE^MONTROSE^CA^91214^USA^|(818)111-3361||19301013|F||A|354-22-1840||||RETIRED|^^^^00000^|||||||20130711|||||0000007496|W||||||||Y|||CHR||||||||RETIRED||||||C\nIN1|1||0401|MEDICARE IP|^^^^     |||||||19951001|||MCR|BARRETT^JEAN^S^^|A|19301013|2820 SYCAMORE AVE^TWELVE OAKS LODGE^MONTROSE^CA^91214^USA^^^|||1||||||||||||||354221840A|||||||F|^^^^00000^|N||||010107127\nIN2||354221840|0000007496^RETIRED|||354221840A||||||||||||||||||||||||||||||Y|||CHR||||W|||RETIRED|||||||||||||||||(818)249-3361||||||||C\nIN1|2||2320|AETNA PPO|PO BOX 14079^PO BOX 14079^LEXINGTON^KY^40512|||081140101400020|RETIRED|||20130101|||COM|BARRETT^JEAN^S^^|A|19301013|2820 SYCAMORE AVE^TWELVE OAKS LODGE^MONTROSE^CA^91214^USA^^^|||2||||||||||||||811001556|||||||F|^^^^00000^|N||||010107127\nIN2||354221840|0000007496^RETIRED|||||||||||||||||||||||||||||||||Y|||CHR||||W|||RETIRED|||||||||||||||||(818)249-3361||||||||C";

  replaceBlanksWithNulls = function(array) {
    return array.map(function(v) {
      if (v && v.trim().length > 0) {
        return v;
      } else {
        return null;
      }
    });
  };

  getMeta = function(hl7version) {
    return JSON.parse(fs.readFileSync(__dirname + ("/../meta/v" + (hl7version.replace('.', '_')) + ".json")));
  };

  coerce = function(value, typeId) {
    return value;
  };

  parse = function(msg) {
    var hl7version, messageType, meta, msh, segments, separators;
    if (msg.substr(0, 4) !== "MSH|") {
      throw new Error("Message should start with MSH segment");
    }
    if (msg.length < 8) {
      throw new Error("Message is too short (MSH truncated)");
    }
    separators = {
      segment: '\n',
      field: msg[3],
      component: msg[4],
      subcomponent: msg[7],
      repetition: msg[5],
      escape: msg[6]
    };
    segments = msg.split(separators.segment);
    msh = segments[0].split(separators.field);
    messageType = msh[8];
    hl7version = msh[11];
    meta = getMeta(hl7version);
    return parseSegments(segments, meta, separators);
  };

  parseSegments = function(segments, meta, separators) {
    var i, len, rawFields, result, segment, segmentName;
    result = {};
    for (i = 0, len = segments.length; i < len; i++) {
      segment = segments[i];
      rawFields = segment.split(separators.field);
      segmentName = rawFields.shift();
      result[segmentName] = parseFields(rawFields, segmentName, meta, separators);
    }
    return result;
  };

  parseFields = function(fields, segmentName, meta, separators) {
    var fieldId, fieldIndex, fieldMax, fieldMeta, fieldMin, fieldValue, fieldValues, i, len, ref, result, segmentMeta, splitRegexp;
    segmentMeta = meta.SEGMENTS[segmentName];
    result = [segmentName];
    if (segmentMeta[0] !== "sequence") {
      throw new Error("Bang! Unknown case: " + segmentMeta[0]);
    }
    for (fieldIndex = i = 0, len = fields.length; i < len; fieldIndex = ++i) {
      fieldValue = fields[fieldIndex];
      fieldMeta = segmentMeta[1][fieldIndex];
      if (fieldMeta) {
        fieldId = fieldMeta[0];
        ref = fieldMeta[1], fieldMin = ref[0], fieldMax = ref[1];
        if (fieldMin === 1 && (!fieldValue || fieldValue === '')) {
          throw new Error("Missing value for required field: " + fieldId);
        }
        splitRegexp = new RegExp("(?!\\" + separators.escape + ")" + separators.repetition);
        fieldValues = fieldValue.split(splitRegexp).map(function(v) {
          return parseComponents(v, fieldId, meta, separators);
        });
        if (fieldMax === 1) {
          result.push(fieldValues[0]);
        } else if (fieldMax === -1) {
          result.push(fieldValues);
        } else {
          throw new Error("Bang! Unknown case for fieldMax: " + fieldMax);
        }
      } else {
        result.push(fieldValue);
      }
    }
    return result;
  };

  parseComponents = function(value, fieldId, meta, separators) {
    var fieldMeta, fieldType, splitRegexp, typeMeta;
    fieldMeta = meta.FIELDS[fieldId];
    if (fieldMeta[0] !== 'leaf') {
      throw new Error("Bang! Unknown case for fieldMeta[0]: " + fieldMeta[0]);
    }
    fieldType = fieldMeta[1];
    typeMeta = meta.DATATYPES[fieldType];
    if (typeMeta) {
      splitRegexp = new RegExp("(?!\\" + separators.escape + ")\\" + separators.component);
      return value.split(splitRegexp).map(function(c, index) {
        var componentId, componentMax, componentMin, ref;
        componentId = typeMeta[1][index][0];
        ref = typeMeta[1][index][1], componentMin = ref[0], componentMax = ref[1];
        if (componentMin === 1 && (!c || c === '')) {
          throw new Error("Missing value for required component " + componentId);
        }
        if (componentMax === -1) {
          throw new Error("Bang! Unlimited cardinality for component " + componentId);
        }
        return parseSubComponents(c, componentId, meta, separators);
      });
    } else {
      return value;
    }
  };

  parseSubComponents = function(v, scId, meta, separators) {
    var scMeta;
    scMeta = meta.DATATYPES[scId];
    if (scMeta) {
      if (scMeta[0] !== 'leaf') {
        throw new Error("Bang! Unknown case for scMeta[0]: " + scMeta[0]);
      }
      return coerce(v, scMeta[1]);
    } else {
      return v;
    }
  };

  console.log("RESULT", JSON.stringify(parse(msg), null, 2));

}).call(this);
